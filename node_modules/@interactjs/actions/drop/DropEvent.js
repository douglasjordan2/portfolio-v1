import * as arr from '@interactjs/utils/arr';
class DropEvent {
    /**
     * Class of events fired on dropzones during drags with acceptable targets.
     */
    constructor(dropState, dragEvent, type) {
        this.propagationStopped = false;
        this.immediatePropagationStopped = false;
        const { element, dropzone } = type === 'dragleave'
            ? dropState.prev
            : dropState.cur;
        this.type = type;
        this.target = element;
        this.currentTarget = element;
        this.dropzone = dropzone;
        this.dragEvent = dragEvent;
        this.relatedTarget = dragEvent.target;
        this.interaction = dragEvent.interaction;
        this.draggable = dragEvent.interactable;
        this.timeStamp = dragEvent.timeStamp;
    }
    /**
     * If this is a `dropactivate` event, the dropzone element will be
     * deactivated.
     *
     * If this is a `dragmove` or `dragenter`, a `dragleave` will be fired on the
     * dropzone element and more.
     */
    reject() {
        const { dropState } = this.interaction;
        if ((this.type !== 'dropactivate') && (!this.dropzone ||
            dropState.cur.dropzone !== this.dropzone ||
            dropState.cur.element !== this.target)) {
            return;
        }
        dropState.prev.dropzone = this.dropzone;
        dropState.prev.element = this.target;
        dropState.rejected = true;
        dropState.events.enter = null;
        this.stopImmediatePropagation();
        if (this.type === 'dropactivate') {
            const activeDrops = dropState.activeDrops;
            const index = arr.findIndex(activeDrops, ({ dropzone, element }) => dropzone === this.dropzone && element === this.target);
            dropState.activeDrops = [
                ...activeDrops.slice(0, index),
                ...activeDrops.slice(index + 1),
            ];
            const deactivateEvent = new DropEvent(dropState, this.dragEvent, 'dropdeactivate');
            deactivateEvent.dropzone = this.dropzone;
            deactivateEvent.target = this.target;
            this.dropzone.fire(deactivateEvent);
        }
        else {
            this.dropzone.fire(new DropEvent(dropState, this.dragEvent, 'dragleave'));
        }
    }
    preventDefault() { }
    stopPropagation() {
        this.propagationStopped = true;
    }
    stopImmediatePropagation() {
        this.immediatePropagationStopped = this.propagationStopped = true;
    }
}
export default DropEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHJvcEV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRHJvcEV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUE7QUFFNUMsTUFBTSxTQUFTO0lBYWI7O09BRUc7SUFDSCxZQUFhLFNBQW1DLEVBQUUsU0FBUyxFQUFFLElBQUk7UUFOakUsdUJBQWtCLEdBQUcsS0FBSyxDQUFBO1FBQzFCLGdDQUEyQixHQUFHLEtBQUssQ0FBQTtRQU1qQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksS0FBSyxXQUFXO1lBQ2hELENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSTtZQUNoQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQTtRQUVqQixJQUFJLENBQUMsSUFBSSxHQUFZLElBQUksQ0FBQTtRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFVLE9BQU8sQ0FBQTtRQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQTtRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFRLFFBQVEsQ0FBQTtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFPLFNBQVMsQ0FBQTtRQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUE7UUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBSyxTQUFTLENBQUMsV0FBVyxDQUFBO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQU8sU0FBUyxDQUFDLFlBQVksQ0FBQTtRQUMzQyxJQUFJLENBQUMsU0FBUyxHQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUE7SUFDMUMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUV0QyxJQUNFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsSUFBSSxDQUNoQyxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQ2QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVE7WUFDeEMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzFDLE9BQU07U0FDUDtRQUVELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUE7UUFDdkMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUVwQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQTtRQUN6QixTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFFN0IsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUE7UUFFL0IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRTtZQUNoQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFBO1lBQ3pDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUNqRSxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBRXhELFNBQVMsQ0FBQyxXQUFXLEdBQUc7Z0JBQ3RCLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO2dCQUM5QixHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQzthQUNoQyxDQUFBO1lBRUQsTUFBTSxlQUFlLEdBQUcsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtZQUVsRixlQUFlLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUE7WUFDeEMsZUFBZSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1lBRXBDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1NBQ3BDO2FBQ0k7WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFBO1NBQzFFO0lBQ0gsQ0FBQztJQUVELGNBQWMsS0FBSyxDQUFDO0lBRXBCLGVBQWU7UUFDYixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFBO0lBQ2hDLENBQUM7SUFFRCx3QkFBd0I7UUFDdEIsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUE7SUFDbkUsQ0FBQztDQUNGO0FBRUQsZUFBZSxTQUFTLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSW50ZXJhY3RhYmxlIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3RhYmxlJ1xuaW1wb3J0IEludGVyYWN0RXZlbnQgZnJvbSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdEV2ZW50J1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3Rpb24nXG5pbXBvcnQgeyBBY3Rpb25OYW1lIH0gZnJvbSAnQGludGVyYWN0anMvY29yZS9zY29wZSdcbmltcG9ydCAqIGFzIGFyciBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9hcnInXG5cbmNsYXNzIERyb3BFdmVudCB7XG4gIHR5cGU6IHN0cmluZ1xuICB0YXJnZXQ6IEVsZW1lbnRcbiAgY3VycmVudFRhcmdldDogRWxlbWVudFxuICBkcm9wem9uZTogSW50ZXJhY3RhYmxlXG4gIGRyYWdFdmVudDogSW50ZXJhY3RFdmVudDxBY3Rpb25OYW1lLkRyYWc+XG4gIHJlbGF0ZWRUYXJnZXQ6IEVsZW1lbnRcbiAgaW50ZXJhY3Rpb246IEludGVyYWN0aW9uXG4gIGRyYWdnYWJsZTogSW50ZXJhY3RhYmxlXG4gIHRpbWVTdGFtcDogbnVtYmVyXG4gIHByb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlXG4gIGltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIENsYXNzIG9mIGV2ZW50cyBmaXJlZCBvbiBkcm9wem9uZXMgZHVyaW5nIGRyYWdzIHdpdGggYWNjZXB0YWJsZSB0YXJnZXRzLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRyb3BTdGF0ZTogSW50ZXJhY3Rpb25bJ2Ryb3BTdGF0ZSddLCBkcmFnRXZlbnQsIHR5cGUpIHtcbiAgICBjb25zdCB7IGVsZW1lbnQsIGRyb3B6b25lIH0gPSB0eXBlID09PSAnZHJhZ2xlYXZlJ1xuICAgICAgPyBkcm9wU3RhdGUucHJldlxuICAgICAgOiBkcm9wU3RhdGUuY3VyXG5cbiAgICB0aGlzLnR5cGUgICAgICAgICAgPSB0eXBlXG4gICAgdGhpcy50YXJnZXQgICAgICAgID0gZWxlbWVudFxuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IGVsZW1lbnRcbiAgICB0aGlzLmRyb3B6b25lICAgICAgPSBkcm9wem9uZVxuICAgIHRoaXMuZHJhZ0V2ZW50ICAgICA9IGRyYWdFdmVudFxuICAgIHRoaXMucmVsYXRlZFRhcmdldCA9IGRyYWdFdmVudC50YXJnZXRcbiAgICB0aGlzLmludGVyYWN0aW9uICAgPSBkcmFnRXZlbnQuaW50ZXJhY3Rpb25cbiAgICB0aGlzLmRyYWdnYWJsZSAgICAgPSBkcmFnRXZlbnQuaW50ZXJhY3RhYmxlXG4gICAgdGhpcy50aW1lU3RhbXAgICAgID0gZHJhZ0V2ZW50LnRpbWVTdGFtcFxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgYSBgZHJvcGFjdGl2YXRlYCBldmVudCwgdGhlIGRyb3B6b25lIGVsZW1lbnQgd2lsbCBiZVxuICAgKiBkZWFjdGl2YXRlZC5cbiAgICpcbiAgICogSWYgdGhpcyBpcyBhIGBkcmFnbW92ZWAgb3IgYGRyYWdlbnRlcmAsIGEgYGRyYWdsZWF2ZWAgd2lsbCBiZSBmaXJlZCBvbiB0aGVcbiAgICogZHJvcHpvbmUgZWxlbWVudCBhbmQgbW9yZS5cbiAgICovXG4gIHJlamVjdCAoKSB7XG4gICAgY29uc3QgeyBkcm9wU3RhdGUgfSA9IHRoaXMuaW50ZXJhY3Rpb25cblxuICAgIGlmIChcbiAgICAgICh0aGlzLnR5cGUgIT09ICdkcm9wYWN0aXZhdGUnKSAmJiAoXG4gICAgICAgICF0aGlzLmRyb3B6b25lIHx8XG4gICAgICAgIGRyb3BTdGF0ZS5jdXIuZHJvcHpvbmUgIT09IHRoaXMuZHJvcHpvbmUgfHxcbiAgICAgICAgZHJvcFN0YXRlLmN1ci5lbGVtZW50ICE9PSB0aGlzLnRhcmdldCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGRyb3BTdGF0ZS5wcmV2LmRyb3B6b25lID0gdGhpcy5kcm9wem9uZVxuICAgIGRyb3BTdGF0ZS5wcmV2LmVsZW1lbnQgPSB0aGlzLnRhcmdldFxuXG4gICAgZHJvcFN0YXRlLnJlamVjdGVkID0gdHJ1ZVxuICAgIGRyb3BTdGF0ZS5ldmVudHMuZW50ZXIgPSBudWxsXG5cbiAgICB0aGlzLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAodGhpcy50eXBlID09PSAnZHJvcGFjdGl2YXRlJykge1xuICAgICAgY29uc3QgYWN0aXZlRHJvcHMgPSBkcm9wU3RhdGUuYWN0aXZlRHJvcHNcbiAgICAgIGNvbnN0IGluZGV4ID0gYXJyLmZpbmRJbmRleChhY3RpdmVEcm9wcywgKHsgZHJvcHpvbmUsIGVsZW1lbnQgfSkgPT5cbiAgICAgICAgZHJvcHpvbmUgPT09IHRoaXMuZHJvcHpvbmUgJiYgZWxlbWVudCA9PT0gdGhpcy50YXJnZXQpXG5cbiAgICAgIGRyb3BTdGF0ZS5hY3RpdmVEcm9wcyA9IFtcbiAgICAgICAgLi4uYWN0aXZlRHJvcHMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAuLi5hY3RpdmVEcm9wcy5zbGljZShpbmRleCArIDEpLFxuICAgICAgXVxuXG4gICAgICBjb25zdCBkZWFjdGl2YXRlRXZlbnQgPSBuZXcgRHJvcEV2ZW50KGRyb3BTdGF0ZSwgdGhpcy5kcmFnRXZlbnQsICdkcm9wZGVhY3RpdmF0ZScpXG5cbiAgICAgIGRlYWN0aXZhdGVFdmVudC5kcm9wem9uZSA9IHRoaXMuZHJvcHpvbmVcbiAgICAgIGRlYWN0aXZhdGVFdmVudC50YXJnZXQgPSB0aGlzLnRhcmdldFxuXG4gICAgICB0aGlzLmRyb3B6b25lLmZpcmUoZGVhY3RpdmF0ZUV2ZW50KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZHJvcHpvbmUuZmlyZShuZXcgRHJvcEV2ZW50KGRyb3BTdGF0ZSwgdGhpcy5kcmFnRXZlbnQsICdkcmFnbGVhdmUnKSlcbiAgICB9XG4gIH1cblxuICBwcmV2ZW50RGVmYXVsdCAoKSB7fVxuXG4gIHN0b3BQcm9wYWdhdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlXG4gIH1cblxuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKCkge1xuICAgIHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRHJvcEV2ZW50XG4iXX0=