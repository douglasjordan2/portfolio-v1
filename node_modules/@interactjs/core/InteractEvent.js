import extend from '@interactjs/utils/extend';
import getOriginXY from '@interactjs/utils/getOriginXY';
import hypot from '@interactjs/utils/hypot';
import defaults from './defaultOptions';
export var EventPhase;
(function (EventPhase) {
    EventPhase["Start"] = "start";
    EventPhase["Move"] = "move";
    EventPhase["End"] = "end";
    EventPhase["_NONE"] = "";
})(EventPhase || (EventPhase = {}));
export class InteractEvent {
    /** */
    constructor(interaction, event, actionName, phase, element, related, preEnd, type) {
        this.immediatePropagationStopped = false;
        this.propagationStopped = false;
        element = element || interaction.element;
        const target = interaction.interactable;
        // FIXME: add deltaSource to defaults
        const deltaSource = ((target && target.options) || defaults).deltaSource;
        const origin = getOriginXY(target, element, actionName);
        const starting = phase === 'start';
        const ending = phase === 'end';
        const prevEvent = starting ? this : interaction.prevEvent;
        const coords = starting
            ? interaction.coords.start
            : ending
                ? { page: prevEvent.page, client: prevEvent.client, timeStamp: interaction.coords.cur.timeStamp }
                : interaction.coords.cur;
        this.page = extend({}, coords.page);
        this.client = extend({}, coords.client);
        this.timeStamp = coords.timeStamp;
        if (!ending) {
            this.page.x -= origin.x;
            this.page.y -= origin.y;
            this.client.x -= origin.x;
            this.client.y -= origin.y;
        }
        this.ctrlKey = event.ctrlKey;
        this.altKey = event.altKey;
        this.shiftKey = event.shiftKey;
        this.metaKey = event.metaKey;
        this.button = event.button;
        this.buttons = event.buttons;
        this.target = element;
        this.currentTarget = element;
        this.relatedTarget = related || null;
        this.preEnd = preEnd;
        this.type = type || (actionName + (phase || ''));
        this.interaction = interaction;
        this.interactable = target;
        this.t0 = starting
            ? interaction.pointers[interaction.pointers.length - 1].downTime
            : prevEvent.t0;
        this.x0 = interaction.coords.start.page.x - origin.x;
        this.y0 = interaction.coords.start.page.y - origin.y;
        this.clientX0 = interaction.coords.start.client.x - origin.x;
        this.clientY0 = interaction.coords.start.client.y - origin.y;
        if (starting || ending) {
            this.delta = { x: 0, y: 0 };
        }
        else {
            this.delta = {
                x: this[deltaSource].x - prevEvent[deltaSource].x,
                y: this[deltaSource].y - prevEvent[deltaSource].y,
            };
        }
        this.dt = interaction.coords.delta.timeStamp;
        this.duration = this.timeStamp - this.t0;
        // velocity and speed in pixels per second
        this.velocity = extend({}, interaction.coords.velocity[deltaSource]);
        this.speed = hypot(this.velocity.x, this.velocity.y);
        this.swipe = (ending || phase === 'inertiastart') ? this.getSwipe() : null;
    }
    get pageX() { return this.page.x; }
    set pageX(value) { this.page.x = value; }
    get pageY() { return this.page.y; }
    set pageY(value) { this.page.y = value; }
    get clientX() { return this.client.x; }
    set clientX(value) { this.client.x = value; }
    get clientY() { return this.client.y; }
    set clientY(value) { this.client.y = value; }
    get dx() { return this.delta.x; }
    set dx(value) { this.delta.x = value; }
    get dy() { return this.delta.y; }
    set dy(value) { this.delta.y = value; }
    get velocityX() { return this.velocity.x; }
    set velocityX(value) { this.velocity.x = value; }
    get velocityY() { return this.velocity.y; }
    set velocityY(value) { this.velocity.y = value; }
    getSwipe() {
        const interaction = this.interaction;
        if (interaction.prevEvent.speed < 600 ||
            this.timeStamp - interaction.prevEvent.timeStamp > 150) {
            return null;
        }
        let angle = 180 * Math.atan2(interaction.prevEvent.velocityY, interaction.prevEvent.velocityX) / Math.PI;
        const overlap = 22.5;
        if (angle < 0) {
            angle += 360;
        }
        const left = 135 - overlap <= angle && angle < 225 + overlap;
        const up = 225 - overlap <= angle && angle < 315 + overlap;
        const right = !left && (315 - overlap <= angle || angle < 45 + overlap);
        const down = !up && 45 - overlap <= angle && angle < 135 + overlap;
        return {
            up,
            down,
            left,
            right,
            angle,
            speed: interaction.prevEvent.speed,
            velocity: {
                x: interaction.prevEvent.velocityX,
                y: interaction.prevEvent.velocityY,
            },
        };
    }
    preventDefault() { }
    /**
     * Don't call listeners on the remaining targets
     */
    stopImmediatePropagation() {
        this.immediatePropagationStopped = this.propagationStopped = true;
    }
    /**
     * Don't call any other listeners (even on the current target)
     */
    stopPropagation() {
        this.propagationStopped = true;
    }
}
export default InteractEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJhY3RFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkludGVyYWN0RXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sMEJBQTBCLENBQUE7QUFDN0MsT0FBTyxXQUFXLE1BQU0sK0JBQStCLENBQUE7QUFDdkQsT0FBTyxLQUFLLE1BQU0seUJBQXlCLENBQUE7QUFDM0MsT0FBTyxRQUFRLE1BQU0sa0JBQWtCLENBQUE7QUFLdkMsTUFBTSxDQUFOLElBQVksVUFLWDtBQUxELFdBQVksVUFBVTtJQUNwQiw2QkFBZSxDQUFBO0lBQ2YsMkJBQWEsQ0FBQTtJQUNiLHlCQUFXLENBQUE7SUFDWCx3QkFBVSxDQUFBO0FBQ1osQ0FBQyxFQUxXLFVBQVUsS0FBVixVQUFVLFFBS3JCO0FBRUQsTUFBTSxPQUFPLGFBQWE7SUEwQ3hCLE1BQU07SUFDTixZQUNFLFdBQXdCLEVBQ3hCLEtBQWdDLEVBQ2hDLFVBQWEsRUFDYixLQUFRLEVBQ1IsT0FBZ0IsRUFDaEIsT0FBaUIsRUFDakIsTUFBZ0IsRUFDaEIsSUFBYTtRQVpmLGdDQUEyQixHQUFHLEtBQUssQ0FBQTtRQUNuQyx1QkFBa0IsR0FBRyxLQUFLLENBQUE7UUFheEIsT0FBTyxHQUFHLE9BQU8sSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFBO1FBRXhDLE1BQU0sTUFBTSxHQUFRLFdBQVcsQ0FBQyxZQUFZLENBQUE7UUFDNUMscUNBQXFDO1FBQ3JDLE1BQU0sV0FBVyxHQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBUyxDQUFDLFdBQWdDLENBQUE7UUFDdEcsTUFBTSxNQUFNLEdBQVEsV0FBVyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDNUQsTUFBTSxRQUFRLEdBQU0sS0FBSyxLQUFLLE9BQU8sQ0FBQTtRQUNyQyxNQUFNLE1BQU0sR0FBUSxLQUFLLEtBQUssS0FBSyxD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QUFBO0lBQzVFLENBQUM7SUFFRCxJQUFJLEtBQUssS0FBTSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNuQyxJQUFJLEtBQUssQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUN6QyxJQUFJLEtBQUssS0FBTSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNuQyxJQUFJLEtBQUssQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUV6QyxJQUFJLE9BQU8sS0FBTSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUN2QyxJQUFJLE9BQU8sQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUM3QyxJQUFJLE9BQU8sS0FBTSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUN2QyxJQUFJLE9BQU8sQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUU3QyxJQUFJLEVBQUUsS0FBTSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNqQyxJQUFJLEVBQUUsQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUN2QyxJQUFJLEVBQUUsS0FBTSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNqQyxJQUFJLEVBQUUsQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUV2QyxJQUFJLFNBQVMsS0FBTSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUMzQyxJQUFJLFNBQVMsQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUNqRCxJQUFJLFNBQVMsS0FBTSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUMzQyxJQUFJLFNBQVMsQ0FBRSxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUVqRCxRQUFRO1FBQ04sTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUVwQyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLEdBQUc7WUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDMUQsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELElBQUksS0FBSyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQTtRQUN4RyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFFcEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsS0FBSyxJQUFJLEdBQUcsQ0FBQTtTQUNiO1FBRUQsTUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sSUFBSSxLQUFLLElBQUksS0FBSyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUE7UUFDNUQsTUFBTSxFQUFFLEdBQUssR0FBRyxHQUFHLE9BQU8sSUFBSSxLQUFLLElBQUksS0FBSyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUE7UUFFNUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxJQUFJLEtBQUssSUFBSSxLQUFLLEdBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFBO1FBQ3hFLE1BQU0sSUFBSSxHQUFJLENBQUMsRUFBRSxJQUFRLEVBQUUsR0FBRyxPQUFPLElBQUksS0FBSyxJQUFJLEtBQUssR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFBO1FBRXZFLE9BQU87WUFDTCxFQUFFO1lBQ0YsSUFBSTtZQUNKLElBQUk7WUFDSixLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUssRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUs7WUFDbEMsUUFBUSxFQUFFO2dCQUNSLENBQUMsRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVM7Z0JBQ2xDLENBQUMsRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVM7YUFDbkM7U0FDRixDQUFBO0lBQ0gsQ0FBQztJQUVELGNBQWMsS0FBSyxDQUFDO0lBRXBCOztPQUVHO0lBQ0gsd0JBQXdCO1FBQ3RCLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFBO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDYixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFBO0lBQ2hDLENBQUM7Q0FDRjtBQUVELGVBQWUsYUFBYSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4dGVuZCBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9leHRlbmQnXG5pbXBvcnQgZ2V0T3JpZ2luWFkgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvZ2V0T3JpZ2luWFknXG5pbXBvcnQgaHlwb3QgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvaHlwb3QnXG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0T3B0aW9ucydcbmltcG9ydCBJbnRlcmFjdGFibGUgZnJvbSAnLi9JbnRlcmFjdGFibGUnXG5pbXBvcnQgSW50ZXJhY3Rpb24gZnJvbSAnLi9JbnRlcmFjdGlvbidcbmltcG9ydCB7IEFjdGlvbk5hbWUgfSBmcm9tICcuL3Njb3BlJ1xuXG5leHBvcnQgZW51bSBFdmVudFBoYXNlIHtcbiAgU3RhcnQgPSAnc3RhcnQnLFxuICBNb3ZlID0gJ21vdmUnLFxuICBFbmQgPSAnZW5kJyxcbiAgX05PTkUgPSAnJyxcbn1cblxuZXhwb3J0IGNsYXNzIEludGVyYWN0RXZlbnQ8XG4gIFQgZXh0ZW5kcyBBY3Rpb25OYW1lID0gYW55LFxuICBQIGV4dGVuZHMgRXZlbnRQaGFzZSA9IEV2ZW50UGhhc2UuX05PTkUsXG4+IHtcbiAgdHlwZTogc3RyaW5nXG4gIHRhcmdldDogRWxlbWVudFxuICByZWxhdGVkVGFyZ2V0OiBFbGVtZW50IHwgbnVsbFxuICBjdXJyZW50VGFyZ2V0OiBFbGVtZW50XG4gIHNjcmVlblg/OiBudW1iZXJcbiAgc2NyZWVuWT86IG51bWJlclxuICBidXR0b246IG51bWJlclxuICBidXR0b25zOiBudW1iZXJcbiAgY3RybEtleTogYm9vbGVhblxuICBzaGlmdEtleTogYm9vbGVhblxuICBhbHRLZXk6IGJvb2xlYW5cbiAgbWV0YUtleTogYm9vbGVhblxuICAvLyBhZGRlZCBieSBpbnRlcmFjdC5qc1xuICBpbnRlcmFjdGFibGU6IEludGVyYWN0YWJsZVxuICBpbnRlcmFjdGlvbjogSW50ZXJhY3Rpb248VD5cbiAgcGFnZTogSW50ZXJhY3QuUG9pbnRcbiAgY2xpZW50OiBJbnRlcmFjdC5Qb2ludFxuICBkZWx0YTogSW50ZXJhY3QuUG9pbnRcbiAgeDA6IG51bWJlclxuICB5MDogbnVtYmVyXG4gIHQwOiBudW1iZXJcbiAgZHQ6IG51bWJlclxuICBkdXJhdGlvbjogbnVtYmVyXG4gIGNsaWVudFgwOiBudW1iZXJcbiAgY2xpZW50WTA6IG51bWJlclxuICB2ZWxvY2l0eTogSW50ZXJhY3QuUG9pbnRcbiAgc3BlZWQ6IG51bWJlclxuICBzd2lwZTogUmV0dXJuVHlwZTxJbnRlcmFjdEV2ZW50PFQ+WydnZXRTd2lwZSddPlxuICB0aW1lU3RhbXA6IGFueVxuICAvLyBkcmFnXG4gIGRyYWdFbnRlcj86IEVsZW1lbnRcbiAgZHJhZ0xlYXZlPzogRWxlbWVudFxuICAvLyByZXNpemVcbiAgYXhlcz86IEludGVyYWN0LlBvaW50XG4gIHByZUVuZD86IGJvb2xlYW5cbiAgaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2VcbiAgcHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2VcblxuICAvKiogKi9cbiAgY29uc3RydWN0b3IgKFxuICAgIGludGVyYWN0aW9uOiBJbnRlcmFjdGlvbixcbiAgICBldmVudDogSW50ZXJhY3QuUG9pbnRlckV2ZW50VHlwZSxcbiAgICBhY3Rpb25OYW1lOiBULFxuICAgIHBoYXNlOiBQLFxuICAgIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgcmVsYXRlZD86IEVsZW1lbnQsXG4gICAgcHJlRW5kPzogYm9vbGVhbixcbiAgICB0eXBlPzogc3RyaW5nLFxuICApIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudCB8fCBpbnRlcmFjdGlvbi5lbGVtZW50XG5cbiAgICBjb25zdCB0YXJnZXQgICAgICA9IGludGVyYWN0aW9uLmludGVyYWN0YWJsZVxuICAgIC8vIEZJWE1FOiBhZGQgZGVsdGFTb3VyY2UgdG8gZGVmYXVsdHNcbiAgICBjb25zdCBkZWx0YVNvdXJjZSA9ICgoKHRhcmdldCAmJiB0YXJnZXQub3B0aW9ucykgfHwgZGVmYXVsdHMpIGFzIGFueSkuZGVsdGFTb3VyY2UgYXMgJ3BhZ2UnIHwgJ2NsaWVudCdcbiAgICBjb25zdCBvcmlnaW4gICAgICA9IGdldE9yaWdpblhZKHRhcmdldCwgZWxlbWVudCwgYWN0aW9uTmFtZSlcbiAgICBjb25zdCBzdGFydGluZyAgICA9IHBoYXNlID09PSAnc3RhcnQnXG4gICAgY29uc3QgZW5kaW5nICAgICAgPSBwaGFzZSA9PT0gJ2VuZCdcbiAgICBjb25zdCBwcmV2RXZlbnQgICA9IHN0YXJ0aW5nID8gdGhpcyA6IGludGVyYWN0aW9uLnByZXZFdmVudFxuICAgIGNvbnN0IGNvb3JkcyAgICAgID0gc3RhcnRpbmdcbiAgICAgID8gaW50ZXJhY3Rpb24uY29vcmRzLnN0YXJ0XG4gICAgICA6IGVuZGluZ1xuICAgICAgICA/IHsgcGFnZTogcHJldkV2ZW50LnBhZ2UsIGNsaWVudDogcHJldkV2ZW50LmNsaWVudCwgdGltZVN0YW1wOiBpbnRlcmFjdGlvbi5jb29yZHMuY3VyLnRpbWVTdGFtcCB9XG4gICAgICAgIDogaW50ZXJhY3Rpb24uY29vcmRzLmN1clxuXG4gICAgdGhpcy5wYWdlICAgICAgPSBleHRlbmQoe30sIGNvb3Jkcy5wYWdlKVxuICAgIHRoaXMuY2xpZW50ICAgID0gZXh0ZW5kKHt9LCBjb29yZHMuY2xpZW50KVxuICAgIHRoaXMudGltZVN0YW1wID0gY29vcmRzLnRpbWVTdGFtcFxuXG4gICAgaWYgKCFlbmRpbmcpIHtcbiAgICAgIHRoaXMucGFnZS54IC09IG9yaWdpbi54XG4gICAgICB0aGlzLnBhZ2UueSAtPSBvcmlnaW4ueVxuXG4gICAgICB0aGlzLmNsaWVudC54IC09IG9yaWdpbi54XG4gICAgICB0aGlzLmNsaWVudC55IC09IG9yaWdpbi55XG4gICAgfVxuXG4gICAgdGhpcy5jdHJsS2V5ICAgICAgID0gZXZlbnQuY3RybEtleVxuICAgIHRoaXMuYWx0S2V5ICAgICAgICA9IGV2ZW50LmFsdEtleVxuICAgIHRoaXMuc2hpZnRLZXkgICAgICA9IGV2ZW50LnNoaWZ0S2V5XG4gICAgdGhpcy5tZXRhS2V5ICAgICAgID0gZXZlbnQubWV0YUtleVxuICAgIHRoaXMuYnV0dG9uICAgICAgICA9IChldmVudCBhcyBNb3VzZUV2ZW50KS5idXR0b25cbiAgICB0aGlzLmJ1dHRvbnMgICAgICAgPSAoZXZlbnQgYXMgTW91c2VFdmVudCkuYnV0dG9uc1xuICAgIHRoaXMudGFyZ2V0ICAgICAgICA9IGVsZW1lbnRcbiAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBlbGVtZW50XG4gICAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gcmVsYXRlZCB8fCBudWxsXG4gICAgdGhpcy5wcmVFbmQgICAgICAgID0gcHJlRW5kXG4gICAgdGhpcy50eXBlICAgICAgICAgID0gdHlwZSB8fCAoYWN0aW9uTmFtZSArIChwaGFzZSB8fCAnJykpXG4gICAgdGhpcy5pbnRlcmFjdGlvbiAgID0gaW50ZXJhY3Rpb25cbiAgICB0aGlzLmludGVyYWN0YWJsZSAgPSB0YXJnZXRcblxuICAgIHRoaXMudDAgPSBzdGFydGluZ1xuICAgICAgPyBpbnRlcmFjdGlvbi5wb2ludGVyc1tpbnRlcmFjdGlvbi5wb2ludGVycy5sZW5ndGggLSAxXS5kb3duVGltZVxuICAgICAgOiBwcmV2RXZlbnQudDBcblxuICAgIHRoaXMueDAgICAgICAgPSBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZS54IC0gb3JpZ2luLnhcbiAgICB0aGlzLnkwICAgICAgID0gaW50ZXJhY3Rpb24uY29vcmRzLnN0YXJ0LnBhZ2UueSAtIG9yaWdpbi55XG4gICAgdGhpcy5jbGllbnRYMCA9IGludGVyYWN0aW9uLmNvb3Jkcy5zdGFydC5jbGllbnQueCAtIG9yaWdpbi54XG4gICAgdGhpcy5jbGllbnRZMCA9IGludGVyYWN0aW9uLmNvb3Jkcy5zdGFydC5jbGllbnQueSAtIG9yaWdpbi55XG5cbiAgICBpZiAoc3RhcnRpbmcgfHwgZW5kaW5nKSB7XG4gICAgICB0aGlzLmRlbHRhID0geyB4OiAwLCB5OiAwIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmRlbHRhID0ge1xuICAgICAgICB4OiB0aGlzW2RlbHRhU291cmNlXS54IC0gcHJldkV2ZW50W2RlbHRhU291cmNlXS54LFxuICAgICAgICB5OiB0aGlzW2RlbHRhU291cmNlXS55IC0gcHJldkV2ZW50W2RlbHRhU291cmNlXS55LFxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZHQgICAgICAgID0gaW50ZXJhY3Rpb24uY29vcmRzLmRlbHRhLnRpbWVTdGFtcFxuICAgIHRoaXMuZHVyYXRpb24gID0gdGhpcy50aW1lU3RhbXAgLSB0aGlzLnQwXG5cbiAgICAvLyB2ZWxvY2l0eSBhbmQgc3BlZWQgaW4gcGl4ZWxzIHBlciBzZWNvbmRcbiAgICB0aGlzLnZlbG9jaXR5ID0gZXh0ZW5kKHt9LCBpbnRlcmFjdGlvbi5jb29yZHMudmVsb2NpdHlbZGVsdGFTb3VyY2VdKVxuICAgIHRoaXMuc3BlZWQgPSBoeXBvdCh0aGlzLnZlbG9jaXR5LngsIHRoaXMudmVsb2NpdHkueSlcblxuICAgIHRoaXMuc3dpcGUgPSAoZW5kaW5nIHx8IHBoYXNlID09PSAnaW5lcnRpYXN0YXJ0JykgPyB0aGlzLmdldFN3aXBlKCkgOiBudWxsXG4gIH1cblxuICBnZXQgcGFnZVggKCkgeyByZXR1cm4gdGhpcy5wYWdlLnggfVxuICBzZXQgcGFnZVggKHZhbHVlKSB7IHRoaXMucGFnZS54ID0gdmFsdWUgfVxuICBnZXQgcGFnZVkgKCkgeyByZXR1cm4gdGhpcy5wYWdlLnkgfVxuICBzZXQgcGFnZVkgKHZhbHVlKSB7IHRoaXMucGFnZS55ID0gdmFsdWUgfVxuXG4gIGdldCBjbGllbnRYICgpIHsgcmV0dXJuIHRoaXMuY2xpZW50LnggfVxuICBzZXQgY2xpZW50WCAodmFsdWUpIHsgdGhpcy5jbGllbnQueCA9IHZhbHVlIH1cbiAgZ2V0IGNsaWVudFkgKCkgeyByZXR1cm4gdGhpcy5jbGllbnQueSB9XG4gIHNldCBjbGllbnRZICh2YWx1ZSkgeyB0aGlzLmNsaWVudC55ID0gdmFsdWUgfVxuXG4gIGdldCBkeCAoKSB7IHJldHVybiB0aGlzLmRlbHRhLnggfVxuICBzZXQgZHggKHZhbHVlKSB7IHRoaXMuZGVsdGEueCA9IHZhbHVlIH1cbiAgZ2V0IGR5ICgpIHsgcmV0dXJuIHRoaXMuZGVsdGEueSB9XG4gIHNldCBkeSAodmFsdWUpIHsgdGhpcy5kZWx0YS55ID0gdmFsdWUgfVxuXG4gIGdldCB2ZWxvY2l0eVggKCkgeyByZXR1cm4gdGhpcy52ZWxvY2l0eS54IH1cbiAgc2V0IHZlbG9jaXR5WCAodmFsdWUpIHsgdGhpcy52ZWxvY2l0eS54ID0gdmFsdWUgfVxuICBnZXQgdmVsb2NpdHlZICgpIHsgcmV0dXJuIHRoaXMudmVsb2NpdHkueSB9XG4gIHNldCB2ZWxvY2l0eVkgKHZhbHVlKSB7IHRoaXMudmVsb2NpdHkueSA9IHZhbHVlIH1cblxuICBnZXRTd2lwZSAoKSB7XG4gICAgY29uc3QgaW50ZXJhY3Rpb24gPSB0aGlzLmludGVyYWN0aW9uXG5cbiAgICBpZiAoaW50ZXJhY3Rpb24ucHJldkV2ZW50LnNwZWVkIDwgNjAwIHx8XG4gICAgICAgIHRoaXMudGltZVN0YW1wIC0gaW50ZXJhY3Rpb24ucHJldkV2ZW50LnRpbWVTdGFtcCA+IDE1MCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBsZXQgYW5nbGUgPSAxODAgKiBNYXRoLmF0YW4yKGludGVyYWN0aW9uLnByZXZFdmVudC52ZWxvY2l0eVksIGludGVyYWN0aW9uLnByZXZFdmVudC52ZWxvY2l0eVgpIC8gTWF0aC5QSVxuICAgIGNvbnN0IG92ZXJsYXAgPSAyMi41XG5cbiAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICBhbmdsZSArPSAzNjBcbiAgICB9XG5cbiAgICBjb25zdCBsZWZ0ID0gMTM1IC0gb3ZlcmxhcCA8PSBhbmdsZSAmJiBhbmdsZSA8IDIyNSArIG92ZXJsYXBcbiAgICBjb25zdCB1cCAgID0gMjI1IC0gb3ZlcmxhcCA8PSBhbmdsZSAmJiBhbmdsZSA8IDMxNSArIG92ZXJsYXBcblxuICAgIGNvbnN0IHJpZ2h0ID0gIWxlZnQgJiYgKDMxNSAtIG92ZXJsYXAgPD0gYW5nbGUgfHwgYW5nbGUgPCAgNDUgKyBvdmVybGFwKVxuICAgIGNvbnN0IGRvd24gID0gIXVwICAgJiYgICA0NSAtIG92ZXJsYXAgPD0gYW5nbGUgJiYgYW5nbGUgPCAxMzUgKyBvdmVybGFwXG5cbiAgICByZXR1cm4ge1xuICAgICAgdXAsXG4gICAgICBkb3duLFxuICAgICAgbGVmdCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYW5nbGUsXG4gICAgICBzcGVlZDogaW50ZXJhY3Rpb24ucHJldkV2ZW50LnNwZWVkLFxuICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgeDogaW50ZXJhY3Rpb24ucHJldkV2ZW50LnZlbG9jaXR5WCxcbiAgICAgICAgeTogaW50ZXJhY3Rpb24ucHJldkV2ZW50LnZlbG9jaXR5WSxcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgcHJldmVudERlZmF1bHQgKCkge31cblxuICAvKipcbiAgICogRG9uJ3QgY2FsbCBsaXN0ZW5lcnMgb24gdGhlIHJlbWFpbmluZyB0YXJnZXRzXG4gICAqL1xuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKCkge1xuICAgIHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogRG9uJ3QgY2FsbCBhbnkgb3RoZXIgbGlzdGVuZXJzIChldmVuIG9uIHRoZSBjdXJyZW50IHRhcmdldClcbiAgICovXG4gIHN0b3BQcm9wYWdhdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJhY3RFdmVudFxuIl19