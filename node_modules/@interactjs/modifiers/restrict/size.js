// This module adds the options.resize.restrictSize setting which sets min and
// max width and height for the target being resized.
//
// interact(target).resize({
//   edges: { top: true, left: true },
//   restrictSize: {
//     min: { width: -600, height: -600 },
//     max: { width:  600, height:  600 },
//   },
// });
import extend from '@interactjs/utils/extend';
import rectUtils from '@interactjs/utils/rect';
import restrictEdges from './edges';
const noMin = { width: -Infinity, height: -Infinity };
const noMax = { width: +Infinity, height: +Infinity };
function start(arg) {
    return restrictEdges.start(arg);
}
function set(arg) {
    const { interaction, state } = arg;
    const { options } = state;
    const edges = interaction.prepared.linkedEdges || interaction.prepared.edges;
    if (!edges) {
        return;
    }
    const rect = rectUtils.xywhToTlbr(interaction.resizeRects.inverted);
    const minSize = rectUtils.tlbrToXywh(restrictEdges.getRestrictionRect(options.min, interaction)) || noMin;
    const maxSize = rectUtils.tlbrToXywh(restrictEdges.getRestrictionRect(options.max, interaction)) || noMax;
    state.options = {
        enabled: options.enabled,
        endOnly: options.endOnly,
        inner: extend({}, restrictEdges.noInner),
        outer: extend({}, restrictEdges.noOuter),
    };
    if (edges.top) {
        state.options.inner.top = rect.bottom - minSize.height;
        state.options.outer.top = rect.bottom - maxSize.height;
    }
    else if (edges.bottom) {
        state.options.inner.bottom = rect.top + minSize.height;
        state.options.outer.bottom = rect.top + maxSize.height;
    }
    if (edges.left) {
        state.options.inner.left = rect.right - minSize.width;
        state.options.outer.left = rect.right - maxSize.width;
    }
    else if (edges.right) {
        state.options.inner.right = rect.left + minSize.width;
        state.options.outer.right = rect.left + maxSize.width;
    }
    restrictEdges.set(arg);
    state.options = options;
}
const restrictSize = {
    start,
    set,
    defaults: {
        enabled: false,
        min: null,
        max: null,
    },
};
export default restrictSize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEVBQThFO0FBQzlFLHFEQUFxRDtBQUNyRCxFQUFFO0FBQ0YsNEJBQTRCO0FBQzVCLHNDQUFzQztBQUN0QyxvQkFBb0I7QUFDcEIsMENBQTBDO0FBQzFDLDBDQUEwQztBQUMxQyxPQUFPO0FBQ1AsTUFBTTtBQUVOLE9BQU8sTUFBTSxNQUFNLDBCQUEwQixDQUFBO0FBQzdDLE9BQU8sU0FBUyxNQUFNLHdCQUF3QixDQUFBO0FBQzlDLE9BQU8sYUFBYSxNQUFNLFNBQVMsQ0FBQTtBQUVuQyxNQUFNLEtBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUNyRCxNQUFNLEtBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUVyRCxTQUFTLEtBQUssQ0FBRSxHQUFHO0lBQ2pCLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUUsR0FBRztJQUNmLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFBO0lBQ2xDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUE7SUFDekIsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUE7SUFFNUUsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLE9BQU07S0FDUDtJQUVELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUVuRSxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO0lBQ3pHLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUE7SUFFekcsS0FBSyxDQUFDLE9BQU8sR0FBRztRQUNkLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztRQUN4QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDeEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUN4QyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDO0tBQ3pDLENBQUE7SUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDYixLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFBO1FBQ3RELEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUE7S0FDdkQ7U0FDSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDckIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtRQUN0RCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFBO0tBQ3ZEO0lBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ2QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQTtRQUNyRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBO0tBQ3REO1NBQ0ksSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1FBQ3BCLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUE7UUFDckQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQTtLQUN0RDtJQUVELGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFdEIsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7QUFDekIsQ0FBQztBQUVELE1BQU0sWUFBWSxHQUFHO0lBQ25CLEtBQUs7SUFDTCxHQUFHO0lBQ0gsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxHQUFHLEVBQUUsSUFBSTtRQUNULEdBQUcsRUFBRSxJQUFJO0tBQ1Y7Q0FDRixDQUFBO0FBRUQsZUFBZSxZQUFZLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIG1vZHVsZSBhZGRzIHRoZSBvcHRpb25zLnJlc2l6ZS5yZXN0cmljdFNpemUgc2V0dGluZyB3aGljaCBzZXRzIG1pbiBhbmRcbi8vIG1heCB3aWR0aCBhbmQgaGVpZ2h0IGZvciB0aGUgdGFyZ2V0IGJlaW5nIHJlc2l6ZWQuXG4vL1xuLy8gaW50ZXJhY3QodGFyZ2V0KS5yZXNpemUoe1xuLy8gICBlZGdlczogeyB0b3A6IHRydWUsIGxlZnQ6IHRydWUgfSxcbi8vICAgcmVzdHJpY3RTaXplOiB7XG4vLyAgICAgbWluOiB7IHdpZHRoOiAtNjAwLCBoZWlnaHQ6IC02MDAgfSxcbi8vICAgICBtYXg6IHsgd2lkdGg6ICA2MDAsIGhlaWdodDogIDYwMCB9LFxuLy8gICB9LFxuLy8gfSk7XG5cbmltcG9ydCBleHRlbmQgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvZXh0ZW5kJ1xuaW1wb3J0IHJlY3RVdGlscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9yZWN0J1xuaW1wb3J0IHJlc3RyaWN0RWRnZXMgZnJvbSAnLi9lZGdlcydcblxuY29uc3Qgbm9NaW4gPSB7IHdpZHRoOiAtSW5maW5pdHksIGhlaWdodDogLUluZmluaXR5IH1cbmNvbnN0IG5vTWF4ID0geyB3aWR0aDogK0luZmluaXR5LCBoZWlnaHQ6ICtJbmZpbml0eSB9XG5cbmZ1bmN0aW9uIHN0YXJ0IChhcmcpIHtcbiAgcmV0dXJuIHJlc3RyaWN0RWRnZXMuc3RhcnQoYXJnKVxufVxuXG5mdW5jdGlvbiBzZXQgKGFyZykge1xuICBjb25zdCB7IGludGVyYWN0aW9uLCBzdGF0ZSB9ID0gYXJnXG4gIGNvbnN0IHsgb3B0aW9ucyB9ID0gc3RhdGVcbiAgY29uc3QgZWRnZXMgPSBpbnRlcmFjdGlvbi5wcmVwYXJlZC5saW5rZWRFZGdlcyB8fCBpbnRlcmFjdGlvbi5wcmVwYXJlZC5lZGdlc1xuXG4gIGlmICghZWRnZXMpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSByZWN0VXRpbHMueHl3aFRvVGxicihpbnRlcmFjdGlvbi5yZXNpemVSZWN0cy5pbnZlcnRlZClcblxuICBjb25zdCBtaW5TaXplID0gcmVjdFV0aWxzLnRsYnJUb1h5d2gocmVzdHJpY3RFZGdlcy5nZXRSZXN0cmljdGlvblJlY3Qob3B0aW9ucy5taW4sIGludGVyYWN0aW9uKSkgfHwgbm9NaW5cbiAgY29uc3QgbWF4U2l6ZSA9IHJlY3RVdGlscy50bGJyVG9YeXdoKHJlc3RyaWN0RWRnZXMuZ2V0UmVzdHJpY3Rpb25SZWN0KG9wdGlvbnMubWF4LCBpbnRlcmFjdGlvbikpIHx8IG5vTWF4XG5cbiAgc3RhdGUub3B0aW9ucyA9IHtcbiAgICBlbmFibGVkOiBvcHRpb25zLmVuYWJsZWQsXG4gICAgZW5kT25seTogb3B0aW9ucy5lbmRPbmx5LFxuICAgIGlubmVyOiBleHRlbmQoe30sIHJlc3RyaWN0RWRnZXMubm9Jbm5lciksXG4gICAgb3V0ZXI6IGV4dGVuZCh7fSwgcmVzdHJpY3RFZGdlcy5ub091dGVyKSxcbiAgfVxuXG4gIGlmIChlZGdlcy50b3ApIHtcbiAgICBzdGF0ZS5vcHRpb25zLmlubmVyLnRvcCA9IHJlY3QuYm90dG9tIC0gbWluU2l6ZS5oZWlnaHRcbiAgICBzdGF0ZS5vcHRpb25zLm91dGVyLnRvcCA9IHJlY3QuYm90dG9tIC0gbWF4U2l6ZS5oZWlnaHRcbiAgfVxuICBlbHNlIGlmIChlZGdlcy5ib3R0b20pIHtcbiAgICBzdGF0ZS5vcHRpb25zLmlubmVyLmJvdHRvbSA9IHJlY3QudG9wICsgbWluU2l6ZS5oZWlnaHRcbiAgICBzdGF0ZS5vcHRpb25zLm91dGVyLmJvdHRvbSA9IHJlY3QudG9wICsgbWF4U2l6ZS5oZWlnaHRcbiAgfVxuICBpZiAoZWRnZXMubGVmdCkge1xuICAgIHN0YXRlLm9wdGlvbnMuaW5uZXIubGVmdCA9IHJlY3QucmlnaHQgLSBtaW5TaXplLndpZHRoXG4gICAgc3RhdGUub3B0aW9ucy5vdXRlci5sZWZ0ID0gcmVjdC5yaWdodCAtIG1heFNpemUud2lkdGhcbiAgfVxuICBlbHNlIGlmIChlZGdlcy5yaWdodCkge1xuICAgIHN0YXRlLm9wdGlvbnMuaW5uZXIucmlnaHQgPSByZWN0LmxlZnQgKyBtaW5TaXplLndpZHRoXG4gICAgc3RhdGUub3B0aW9ucy5vdXRlci5yaWdodCA9IHJlY3QubGVmdCArIG1heFNpemUud2lkdGhcbiAgfVxuXG4gIHJlc3RyaWN0RWRnZXMuc2V0KGFyZylcblxuICBzdGF0ZS5vcHRpb25zID0gb3B0aW9uc1xufVxuXG5jb25zdCByZXN0cmljdFNpemUgPSB7XG4gIHN0YXJ0LFxuICBzZXQsXG4gIGRlZmF1bHRzOiB7XG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgbWluOiBudWxsLFxuICAgIG1heDogbnVsbCxcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzdHJpY3RTaXplXG4iXX0=